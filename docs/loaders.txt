#######
Loaders
#######

This document describes usage for `piecutter`'s loaders.

Loaders are callables that accept location as input argument then return a
template object.

Within `piecutter`'s implementation, loaders typically are classes that
inherit from ``piecutter.Loader`` and override ``open(location)`` method.


************************************
Load templates from local filesystem
************************************

You can load local files:

.. doctest::

   >>> import piecutter
   >>> load = piecutter.LocalLoader(root='../demo')

   >>> with load('hello.txt') as template:
   ...     print(template)
   Hello {who}!
   <BLANKLINE>

   >>> with load('i-dont-exist.txt') as template:  # Doctest: +ELLIPSIS
   ...     print(template)
   Traceback (most recent call last):
     ...
   TemplateNotFound: ...

And local directories:

.. doctest::

   >>> import piecutter
   >>> load = piecutter.LocalLoader(root='../demo')

   >>> with load('.') as template:
   ...     print(template)
   [{"template": "hello.txt"}]


************************
Load files on github.com
************************

.. code-block:: pycon

   >>> from piecutter.utils.files import temporary_directory
   >>> with temporary_directory() as checkout_dir:
   ...     load = piecutter.GithubLoader(checkout_dir)
   ...     try:
   ...         template = load(
   ...             'diecutter/diecutter/0.7/demo/templates/greetings.txt')
   ...         print(template)
   ...     finally:
   ...         template.close()
   {{ greetings|default('Hello') }} {{ name }}!
   <BLANKLINE>


********************
Load files over HTTP
********************

.. doctest::

   >>> load = piecutter.HttpLoader()
   >>> location = 'https://raw.githubusercontent.com' \
   ...            '/diecutter/diecutter/0.7/demo/templates/greetings.txt'
   >>> with load(location) as template:
   ...     print(template)
   {{ greetings|default('Hello') }} {{ name }}!
   <BLANKLINE>
