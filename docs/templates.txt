################
Template objects
################

.. py:module:: piecutter.templates

`piecutter`'s templates are, basically, Python objects whose content can be
read.


***************************
Single units VS collections
***************************

`piecutter` handles two types of templates:

* files: they are rendered as single units;
* directories: they are rendered as collections of files.

:doc:`Loaders </loaders>` make the difference between single units and
collections:

.. doctest::

   >>> import piecutter
   >>> load = piecutter.LocalLoader(root=u'demo')
   >>> with load(u'hello.txt') as template:
   ...     template.is_file
   True
   >>> with load(u'.') as template:
   ...     template.is_dir
   True

`piecutter`'s default loader considers text (bytes, strings, text, unicode),
file wrapper and :class:`Template` as single units.

Single units are rendered as file-like object:

.. doctest::

   >>> render = piecutter.PythonFormatEngine()

   >>> output = render('Hello {who}!', {'who': 'world'})
   >>> print(output.read())
   Hello world!

   >>> from StringIO import StringIO
   >>> output = render(StringIO(u'Hello {who}!'), {'who': 'world'})
   >>> print(output.read())
   Hello world!

Collections are rendered as generator of file-like objects.


*************************
Create template from text
*************************

You can instantiate templates from text:

.. doctest::

   >>> import piecutter
   >>> from __future__ import print_function

   >>> template = piecutter.TextTemplate("I'm a template")
   >>> template  # Doctest: +ELLIPSIS
   <piecutter.templates.TextTemplate object at 0x...>
   >>> print(template)
   I'm a template


*************************
Create template from file
*************************

You can create templates from file-like objects:

.. doctest::

   >>> with open('demo/hello.txt') as template_file:
   ...     template = piecutter.FileTemplate(template_file)
   ...     template  # Doctest: +ELLIPSIS
   ...     print(template)
   <piecutter.templates.FileTemplate object at 0x...>
   Hello {who}!
   <BLANKLINE>


*************************************
Create template from custom locations
*************************************

You can use :doc:`loaders </loaders>` to instantiate templates from custom
locations:

.. doctest::

   >>> import pathlib
   >>> loader = piecutter.LocalLoader(root=pathlib.Path('demo'))
   >>> with loader.open('hello.txt') as template:
   ...     print(template)
   Hello {who}!
   <BLANKLINE>

You should be able to load files from almost everywhere, provided you have the
right loaders. See :doc:`/loaders` for details.


******************************
Create template from directory
******************************

You can create templates from directories using loaders:

.. doctest::

   >>> loader = piecutter.LocalLoader(root=pathlib.Path('demo'))
   >>> print(loader.tree('.'))
   [[u'hello.txt', {}, u'hello.txt'], [u'{who}.txt', {}, u'{who}.txt']]


*******************
Automatic detection
*******************

.. doctest::

   >>> template = piecutter.guess_template("I'm a template")
   >>> isinstance(template, piecutter.TextTemplate)
   True

   >>> with open('demo/hello.txt') as template_file:
   ...     template = piecutter.guess_template(template_file)
   ...     isinstance(template, piecutter.FileTemplate)
   True

   >>> template = piecutter.SmartTemplate("I'm a template")
   >>> template  # Doctest: +ELLIPSIS
   <piecutter.templates.SmartTemplate object at 0x...>
   >>> print(template)
   I'm a template
