###################
Renderers & engines
###################

This document explains `piecutter`'s renderers.

.. testsetup::

   from __future__ import print_function

Renderers use template engines to generate output using templates and data.

Renderers are callables that accept ``template, data`` as input then return
generated output.

Within `piecutter`'s implementation, renderers typically are classes that
inherit ``piecutter.Engine`` and override ``render(template, context)`` method.


*************
Python format
*************

.. doctest::

   >>> import piecutter
   >>> render = piecutter.PythonFormatEngine()
   >>> output = render(u'Hello {who}!', {u'who': u'world'})
   >>> print(output)
   Hello world!


******
Jinja2
******

.. doctest::

   >>> import piecutter
   >>> render = piecutter.Jinja2Engine()
   >>> output = render(u'Hello {{ who }}!', {u'who': u'world'})
   >>> print(output)
   Hello world!


******
Django
******

.. doctest::

   >>> import piecutter
   >>> render = piecutter.DjangoEngine()
   >>> output = render(u'Hello {{ who }}!', {u'who': u'world'})
   >>> print(output)
   Hello world!


*****
Smart
*****

This is a special renderer that tries to detect best engine depending on
template and environment (installed engines).

   >>> import piecutter
   >>> render = piecutter.SmartEngine(
   ...     engines=[
   ...         piecutter.Jinja2Engine(),
   ...         piecutter.DjangoEngine(),
   ...         piecutter.PythonFormatEngine(),
   ...     ],
   ... )
   >>> print(render(u"{# Jinja2 #}Hello {{ who }}!", {u'who': u'world'}))
   Hello world!
   >>> print(render(u"{# Django #}Hello {{ who }}!", {u'who': u'world'}))
   Hello world!
   >>> print(render(u"Hello {who}!", {u'who': u'world'}))
   Hello world!


******************
Render directories
******************

Renderers can also handle directories, as collections of single templates:

.. doctest::

   >>> data = {'who': 'world'}
   >>> render = piecutter.PythonFormatEngine()
   >>> loader = piecutter.LocalLoader(root='../demo/')
   >>> with loader.open('.') as parent_template:
   ...     for child_template in render(parent_template, data):
   ...         print(child_template.name)
   ...         with loader.open(child_template.name) as child_opened:
   ...             print(child_opened)
   hello.txt
   Hello {who}!
   <BLANKLINE>
